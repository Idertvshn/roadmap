import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

// ‚è∞ –•—É–≥–∞—Ü–∞–∞–Ω—ã —Å–ª–æ—Ç—ã–Ω –∂–∞–≥—Å–∞–∞–ª—Ç
const timeSlots = [
  "08:50 - 10:10",
  "10:20 - 11:40",
  "11:50 - 13:10",
  "14:00 - 15:20",
];

// üìÖ ”®–¥—Ä“Ø“Ø–¥–∏–π–Ω –∂–∞–≥—Å–∞–∞–ª—Ç
const daysOfWeek = ["–î–∞–≤–∞–∞", "–ú—è–≥–º–∞—Ä", "–õ—Ö–∞–≥–≤–∞", "–ü“Ø—Ä—ç–≤", "–ë–∞–∞—Å–∞–Ω"];

// üéì –•–∏—á—ç—ç–ª–∏–π–Ω —Ö—É–≤–∞–∞—Ä–∏–π–≥ —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–æ—Ö –∏–Ω—Ç–µ—Ä—Ñ—ç–π—Å
interface TimetableProps {
  userId: string;
  role: string;
}

// ‚úÖ `getTimetable()` —Ñ—É–Ω–∫—Ü—ç—ç—Ä ”©–≥”©–≥–¥–ª–∏–π–≥ –∞–≤–∞—Ö
const getTimetable = async (userId: string, role: string) => {
  let timetable = [];

  // üë©‚Äçüè´ –•—ç—Ä—ç–≤ —Ö—ç—Ä—ç–≥–ª—ç–≥—á –±–∞–≥—à –±–æ–ª teacher_id-–∞–∞—Ä –∞–≤–Ω–∞
  if (role === "teacher") {
    console.log("Fetching timetable for teacher...");
    timetable = await prisma.timetable.findMany({
      where: {
        teacher_id: userId,
      },
      include: {
        lesson: true,
      },
    });
  }
  // üë©‚Äçüéì –•—ç—Ä—ç–≤ —Ö—ç—Ä—ç–≥–ª—ç–≥—á –æ—é—É—Ç–∞–Ω –±–æ–ª school_year-–∞–∞—Ä –∞–≤–Ω–∞
  else if (role === "student") {
    console.log("Fetching timetable for student...");
    const student = await prisma.users.findUnique({
      where: { user_id: userId },
    });

    if (student?.school_year) {
      timetable = await prisma.timetable.findMany({
        where: {
          school_year: student.school_year,
        },
        include: {
          lesson: true,
        },
      });
    }
  }

  console.log("Fetched Timetable:", timetable);
  return timetable;
};

// üìö –•–∏—á—ç—ç–ª–∏–π–Ω —Ö—É–≤–∞–∞—Ä–∏–π–Ω —Ö“Ø—Å–Ω—ç–≥—Ç
const Timetable: React.FC<TimetableProps> = async ({ userId, role }) => {
  // üî• –•—É–≤–∞–∞—Ä–∏–π–Ω ”©–≥”©–≥–¥–ª–∏–π–≥ –∞–≤–∞—Ö
  const timetable = await getTimetable(userId, role);

  // üìù –¶–∞–≥–∏–π–Ω —Ö—É–≤–∞–∞—Ä—å—Ç —Ö–∏—á—ç—ç–ª–∏–π–≥ —Ö–∞—Ä—É—É–ª–∞—Ö —Ñ—É–Ω–∫—Ü
  const getLessonForTimeSlot = (day: string, timeSlot: string) => {
    const startTime = timeSlot.split(" - ")[0]; // "08:50" –≥—ç—Ö –º—ç—Ç
    const lesson = timetable.find(
      (entry: any) => entry.weekdays === day && entry.start_time === startTime
    );
    return lesson ? `${lesson.lesson.lesson_name}` : "";
  };

  return (
    <div className="mt-8">
      <h2 className="text-2xl font-bold mb-4 text-center text-gray-700">
        {role === "teacher" ? "–ë–∞–≥—à–∏–π–Ω —Ö—É–≤–∞–∞—Ä—å" : "–û—é—É—Ç–Ω—ã —Ö—É–≤–∞–∞—Ä—å"}
      </h2>

      <div className="overflow-x-auto">
        <table className="table-auto w-full border-collapse border border-gray-300">
          <thead>
            <tr className="bg-blue-200 text-gray-700">
              <th className="px-4 py-2 border text-lg">–¶–∞–≥</th>
              {daysOfWeek.map((day) => (
                <th key={day} className="px-4 py-2 border text-lg bg-pink-300">
                  {day}
                </th>
              ))}
            </tr>
          </thead>
          <tbody>
            {timeSlots.map((timeSlot) => (
              <tr key={timeSlot}>
                <td className="px-4 py-2 border bg-blue-100 text-sm font-bold text-gray-700">
                  {timeSlot}
                </td>
                {daysOfWeek.map((day) => (
                  <td
                    key={`${day}-${timeSlot}`}
                    className="px-4 py-2 border bg-pink-100 text-center"
                  >
                    {getLessonForTimeSlot(day, timeSlot)}
                  </td>
                ))}
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default Timetable;
